def assign_locals_from(assigns)
  return assign_locals_from(assigns) if self.class.ensure_needs_methods_are_valid!

  @_fortitude_raw_assigns = assigns
  @_fortitude_raw_assigns = @_fortitude_raw_assigns.delete_if { |k,v| ! self.class.is_valid_ruby_method_name?(k) } # :if extra_assigns == :use
  @_fortitude_default_assigns = { }
  the_needs = needs_as_hash
  missing = [ ]
  have_missing = false

  @_fortitude_extra_assigns = assigns.symbolize_keys          # :if [ :error, :use ].include?(extra_assigns)

  #{needs_text}

  if @_fortitude_extra_assigns.size > 0                       # :if extra_assigns == :error
    raise Fortitude::Errors::ExtraAssigns.new(self, @_fortitude_extra_assigns) # :if extra_assigns == :error
  end                                                         # :if extra_assigns == :error

  @_fortitude_extra_assigns.each do |key, value|              # :if extra_assigns == :use
    instance_variable_set(instance_variable_name_for_need(key), value) # :if extra_assigns == :use
  end                                                         # :if extra_assigns == :use

  raise Fortitude::Errors::MissingNeed.new(self, missing, assigns) if have_missing
end
